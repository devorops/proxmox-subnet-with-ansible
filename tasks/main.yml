---
## 1. Create User/Group/Role and assign privileges
- hosts: proxmoxNodePrivileges
  tasks:
    - name:  Create User/Group/Role and assign privileges
      import_tasks: create_subnet_user_and_set_privileges.yml

## 2. Cloning admin-subnet VMs that will be converted to subnet-templates
- hosts: "LocalhostTemplatesGroup"
  connection: local
  tasks:
    - name: Cloning admin-subnet VMs that will be converted to subnet-templates 
      import_tasks: create_vm_from_template.yml

## 3. Creating the necessary subnet templates 
- hosts: "ProxmoxTemplatesGroup"
  tasks:
    - name: Creating the necessary subnet templates
      import_tasks: create_subnet_templates.yml

## 4. Create subnet Admin VMs from the templates created in previos step
- hosts: "AdminVMsGroup"
  tasks:
    - name: Create subnet Admin VMs from the templates created in previos step
      import_tasks: create_vm_from_template.yml

## 5. Creating user defined machines from the provided inventory
- hosts: "UserVMsGroup"
  tasks:
    - name: Creating user defined machines from the provided inventory
      import_tasks: create_vm_from_template.yml

## 6. Generate cfg file for the perimeter router
- hosts: perRouter
  tasks:
    - name: Generate cfg file for the perimeter router
      import_tasks: prepare_hp_config_file.yml

## 7. Generate static ip-mac entries in the perimeter DHCP router
- import_playbook: generate_dhcp_entries.yml

## 8. Starting Perimeter Router
- hosts: perRouter
  tasks:
    - name: Starting Perimeter Router..
      import_tasks: put_vm_in_state.yml 
      vars: 
        state: started

## 9. Waiting for Perimeter-router to become available
- hosts: perRouter
  tasks:
    - name: Waiting for Perimeter-router to become available..
      import_tasks: wait_for_machine_port_to_become_available.yml 
      vars: 
        port_to_wait_for: 22
        ip_address: "{{ hostvars['perRouter']['initial_ip_address'] }}"

## 10. Applying the generated configuration to perimeter router
- hosts: perRouter
  tasks:
    - name: 
      import_tasks: hp_install_config.yml
      vars:
        ip_address: "{{ hostvars['perRouter']['initial_ip_address'] }}"

        


# ---------------------------------------------------------------------------




## 11. Starting Jenkins machine
- hosts: ansibleJenkinsVM
  tasks:
    - name: Starting Jenkins machine..
      import_tasks: put_vm_in_state.yml 
      vars:      
        state: started

## 12. Add route on the local management ansible machine to the Jenkins-Management machine in the subnet
- hosts: perRouter
  tasks:
    - name: Adding route to the jenkins subnet machine..
      import_tasks: add_route_to_subnet.yml

## 13. Waiting for Jenkins machine to become available
- hosts: ansibleJenkinsVM 
  tasks:
    - name: Waiting for Jenkin machine state(maybe 'current' ) to change ...
      import_tasks: wait_for_machine_port_to_become_available.yml 
      vars:
        port_to_wait_for: 22
        ip_address: "{{ hostvars['ansibleJenkinsVM']['host_static_ip'] }}"

## 14. Adding ansible host dynamically to inventory..
- hosts: localhost
  tasks:
    - name: Adding ansible host dynamically to inventory..
      import_tasks: dynamically_add_host.yml
      vars:
        name_set: jenkinsVMM
        ansible_user_set: root
        ansible_host_set: "{{ hostvars['ansibleJenkinsVM']['host_static_ip'] }}"

## 15. setting up jenkins VM
- import_playbook: set_up_jenkins.yml
 
## 16. Add route from to subnet ansible machine..
- hosts: proxmoxInternalRouter
  tasks:
    - name: Adding route to subnet ansible machine..
      import_tasks: add_route_to_subnet_ansible_jenkins.yml













## (optional) 17. Store details/logs in Database/File:
#

## (optional) 18. Send email with all details to customer
# Necessary vars: email, name
#


