## 1. Creating user defined machines from the provided inventory
- hosts: "InternalUserVMsGroup"
  tasks:
    - name: Creating user defined machines from the provided inventory
      import_tasks: create_vm_from_template.yml

## 2. Generate cfg file for the perimeter router
- hosts: perRouter
  tasks:
    - name: Generate cfg file for the perimeter router
      import_tasks: prepare_hp_config_file.yml

## 3. Generate static ip-mac entries in the perimeter DHCP router
- import_playbook: generate_dhcp_entries.yml

## 4. Stopping Perimeter Router
- hosts: perRouter
  tasks:
    - name: Stopping Perimeter Router..
      import_tasks: put_vm_in_state.yml
      vars:
        state: stopped

## 5. Deleting Perimeter Router
- hosts: perRouter
  tasks:
    - name: Deleting Perimeter Router..
      import_tasks: put_vm_in_state.yml
      vars:
        state: started

## 6. Creating the new Perimeter Router
- hosts: perRouter
  tasks:
    - name: Creating the new Perimeter Router
      import_tasks: create_vm_from_template.yml

## 7. Starting Perimeter Router
- hosts: perRouter
  tasks:
    - name: Starting Perimeter Router..
      import_tasks: put_vm_in_state.yml
      vars:
        state: started

## 8. Waiting for Perimeter-router to become available
- hosts: perRouter
  tasks:
    - name: Waiting for Perimeter-router to become available..
      import_tasks: wait_for_machine_port_to_become_available.yml
      vars:
        port_to_wait_for: 22
        ip_address: "{{ hostvars['perRouter']['initial_ip_address'] }}"

## 9. Applying the generated configuration to perimeter router
- hosts: perRouter
  tasks:
    - name:
      import_tasks: hp_install_config.yml
      vars:
        ip_address: "{{ hostvars['perRouter']['initial_ip_address'] }}"

# 5. Re-newing ip address from DHCP
#- hosts: localhost
#  tasks:
#    - name: Re-newing ip address
#      shell: |
#        dhclient -r
#        dhclient

